version: '3.8'

services:
  ollama:
    build:
      context: ./ollama
    container_name: gemma3_ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:11434"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: ankane/pgvector:latest
    container_name: gemma3_db
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      # CRITICAL FIX: Use the guaranteed 'postgres' superuser for the readiness check.
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api_server:
    build: .
    container_name: gemma3_api
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_healthy
    ports:
      - "8000:8000"
    # EXECUTES THE WAIT SCRIPT BEFORE STARTING UVICORN
    command: /bin/sh -c "./wait-for-postgres.sh db 5432 && uvicorn main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: gemma3_open-webui
    ports:
      - "8080:8080"
    volumes:
      - open-webui-data:/app/backend/data
    depends_on:
      ollama:
        condition: service_healthy
    restart: always
    environment:
      - OLLAMA_HOST=http://ollama:11434

  scraper_agent:
    build:
      context: .
      dockerfile: agents/scraper/Dockerfile
    container_name: gemma3_scraper
    restart: on-failure
    env_file:
      - .env
    depends_on:
      ollama:
        condition: service_healthy
      api_server:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: ["python", "scraper.py"]

  inserter_agent:
    build:
      context: .
      dockerfile: agents/insert_nodes/Dockerfile
    container_name: gemma3_inserter
    restart: on-failure
    env_file:
      - .env
    depends_on:
      api_server:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      - DATABASE_HOST=host.docker.internal
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASS}@${DATABASE_HOST}:5432/${DATABASE_NAME}

volumes:
  ollama_models:
  db_data:
  open-webui-data:
services:
  # --- Postgres with pgvector ---
  db:
    image: ankane/pgvector:latest
    container_name: gemma3_db
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- FastAPI Main App ---
  api:
    build: .
    container_name: gemma3_api
    restart: always
    env_file:
      - .env
    ports:
      - "8000:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      db:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Ollama GPU Service ---
  ollama:
    build:
      context: ./ollama
    container_name: gemma3_ollama
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:11434"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Scraper Agent ---
  scraper:
    build:
      context: .
      dockerfile: agents/scraper/Dockerfile
    container_name: gemma3_scraper
    restart: on-failure
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
      ollama:
        condition: service_healthy
    command: ["python", "scraper.py"]

  # --- Node Inserter Agent ---
  inserter:
    build:
      context: .
      dockerfile: agents/insert_nodes/Dockerfile
    container_name: gemma3_inserter
    restart: on-failure
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
      ollama:
        condition: service_healthy
    command: ["python", "agents/insert_nodes/insert_nodes.py"]

volumes:
  db_data:
  ollama_models:

